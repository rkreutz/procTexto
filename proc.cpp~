#include <iostream>
#include <sstream>
#include <fstream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>

using namespace std;

typedef struct dados {
	struct dados *next;
	char *caminho;
	char *imagem;
	unsigned tempo;
	unsigned char resp1;
	unsigned char resp2;
} Dados;

typedef struct subject {
	struct subject *next;
	int subj;
	Dados *header[3];
} Subject;

typedef struct grupo {
	Subject *header;
} Grupo;

void clear_table (Grupo grp);

void print_table (Grupo grp);

int main(int argc , char *argv[]) {
	if(argc < 2) {
		cout << "\nO programa foi inicializado sem nenhum arquivo carregado previamente.\n"
			 << "Para carregar um arquivo previamente escreva o seguinte codigo no terminal\n\n"
			 << "./proc nome-do-arquivo1.txt nome-do-arquivo2.txt [...]\n\n";
		return 0;
	}
	
	Grupo grp;
	grp.header = NULL;
	
	for(int x = 1; x < argc; x++) {
		fstream file(argv[x], ios_base::in);
		bool subj = false, arquivo = false;
		Subject *curr = grp.header;
		Dados *arquivo_ptr = NULL;
		
		if (file.is_open()) {
			string str;
			file >> str;

			while (file.peek() != EOF) {
				transform(str.begin(), str.end(), str.begin(), ::tolower);
				
				if (str.find("subject") != string::npos) {			
					if (!subj) {
						int subj_id;					
						file >> subj_id;					
						//cout << subj_id << endl;
						subj = true;
						
						while (curr && curr->subj != subj_id) curr = curr->next;

						if (curr == NULL) {
							curr = (Subject*)malloc(sizeof(Subject));
							curr->next = NULL;
							curr->header[0] = NULL;
							curr->header[1] = NULL;
							curr->header[2] = NULL;
							curr->subj = subj_id;
							
							if(grp.header) {
								Subject *tmp = grp.header;
								while(tmp->next) tmp = tmp->next;
								tmp->next = curr;
							}
							else
								grp.header = curr;
						}
					}
				}

				else if (str.find("basename") != string::npos && subj) {
					if (!arquivo) {
						file >> str; file >> str; file >> str;
						unsigned y;
						file >> y;
						//cout << "Arquivo numero " << y << endl;
						arquivo = true;

						if(curr) {
							if (y <= 3 && y >= 1) {
								y--;
								if(curr->header[y] == NULL) {
									curr->header[y] = (Dados*)malloc(sizeof(Dados));
									curr->header[y]->next = NULL;
									curr->header[y]->caminho = NULL;
					void print_table (Grupo grp);				curr->header[y]->imagem = NULL;
									arquivo_ptr = curr->header[y];
								}
								else {
									//Erro: arquivo ja foi carregado
									cout << "Arquivo " << argv[x] << " conflitando com outro arquivo.\n";
									clear_table(grp);
									return -1;
								}
							}
							else {
								//ERRO: esperado no maximo arquivo entre 1 e 3.
								cout << "Arquivo " << argv[x] << " excedeu o numero do arquivo. Maximo 3.\n";
								clear_table(grp);
								return -1;
							}
						}
					}
				}

				else if (str.find("imagem") != string::npos && subj && arquivo) {
					string caminho, imagem;					
					file >> caminho;
					//cout << "Caminho: " << caminho << endl;
					file >> imagem;
					//cout << "Imagem: " << imagem << endl;

					if(!caminho.empty() && !imagem.empty()) {
						if(arquivo_ptr->caminho == NULL ) {
							arquivo_ptr->caminho = (char*)malloc(caminho.length() + 1);
							strcpy(arquivo_ptr->caminho, caminho.c_str());
							arquivo_ptr->imagem = (char*)malloc(imagem.length() + 1);
							strcpy(arquivo_ptr->imagem, imagem.c_str());
						}
						else {
							arquivo_ptr->next = (Dados*)malloc(sizeof(Dados));
							arquivo_ptr->next->next = NULL;
							arquivo_ptr->next->caminho = NULL;
							arquivo_ptr->next->imagem = NULL;
							arquivo_ptr = arquivo_ptr->next;

							arquivo_ptr->caminho = (char*)malloc(caminho.length() + 1);
							strcpy(arquivo_ptr->caminho, caminho.c_str());
							arquivo_ptr->imagem = (char*)malloc(imagem.length() + 1);
							strcpy(arquivo_ptr->imagem, imagem.c_str());
						}
					}
					else {
						///erro
						cout << "Uma das imagens do arquivo " << argv[x] << " nao pode ser carregado corretamente.\n";
						clear_table(grp);
						return -1;
					}
				}

				else if (str.find("tempo") != string::npos && subj && arquivo) {
					unsigned tempo;
					file >> tempo;
					//cout << tempo << endl;

					if(tempo > 0 && tempo < 20000 && arquivo_ptr->caminho != NULL && arquivo_ptr->imagem != NULL) {
						arquivo_ptr->tempo = tempo/1000;
					}
					else {
						//Erro
						cout << "Tempo do arquivo " << argv[x] << " nao pode ser carregado corretamente ou imagem nao foi carregada anteriormente.\n";
						clear_table(grp);
						return -1;
					}
				}

				else if (str.find("pergunta1.resp") != string::npos && subj && arquivo) {
					unsigned char y;
					file >> y;
					//cout << "Resposta 1: " << y << endl;
					
					if(arquivo_ptr->caminho != NULL && arquivo_ptr->imagem != NULL) {
						arquivo_ptr->resp1 = y;
					}
					else {
						//Erro
						cout << "Imagem do arquivo " << argv[x] << " nao foi carregada corretamente.\n";
						clear_table(grp);
						return -1;
					}
				}

				else if (str.find("pergunta3.resp") != string::npos && subj && arquivo) {
					unsigned char y;
					file >> y;
					//cout << "Resposta 1: " << y << endl;
					
					if(arquivo_ptr->caminho != NULL && arquivo_ptr->imagem != NULL) {
						arquivo_ptr->resp1 = y;
					}
					else {
						//Erro
						cout << "Imagem do arquivo " << argv[x] << " nao foi carregada corretamente.\n";
						clear_table(grp);
						return -1;
					}
				}

				else if (str.find("pergunta5.resp") != string::npos && subj && arquivo) {
					unsigned char y;
					file >> y;
					//cout << "Resposta 1: " << y << endl;
					
					if(arquivo_ptr->caminho != NULL && arquivo_ptr->imagem != NULL) {
						arquivo_ptr->resp1 = y;
					}
					else {
						//Erro
						cout << "Imagem do arquivo " << argv[x] << " nao foi carregada corretamente.\n";
						clear_table(grp);
						return -1;
					}
				}



				else if (str.find("pergunta2.resp") != string::npos && subj && arquivo) {
					unsigned char y;
					file >> y;
					//cout << "Resposta 2: " << y << endl;

					if(arquivo_ptr->caminho != NULL && arquivo_ptr->imagem != NULL) {
						arquivo_ptr->resp2 = y;
					}
					else {
						//Erro
						cout << "Imagem do arquivo " << argv[x] << " nao foi carregada corretamente.\n";
						clear_table(grp);
						return -1;
					}
				}

				else if (str.find("pergunta4.resp") != string::npos && subj && arquivo) {
					unsigned char y;
					file >> y;
					//cout << "Resposta 2: " << y << endl;

					if(arquivo_ptr->caminho != NULL && arquivo_ptr->imagem != NULL) {
						arquivo_ptr->resp2 = y;
					}
					else {
						//Erro
						cout << "Imagem do arquivo " << argv[x] << " nao foi carregada corretamente.\n";
						clear_table(grp);
						return -1;
					}
				}

				else if (str.find("pergunta6.resp") != string::npos && subj && arquivo) {
					unsigned char y;
					file >> y;
					//cout << "Resposta 2: " << y << endl;

					if(arquivo_ptr->caminho != NULL && arquivo_ptr->imagem != NULL) {
						arquivo_ptr->resp2 = y;
					}
					else {
						//Erro
						cout << "Imagem do arquivo " << argv[x] << " nao foi carregada corretamente.\n";
						clear_table(grp);
						return -1;
					}
				}

				file >> str;
			}



		}

		else {
			cout << "Arquivo " << argv[x] << " nao pode ser carregado.\n";
		}
	}

	/*cout << "*********************\n\n";
	Subject *tmp = grp.header;
	while (tmp) {
		cout << tmp->subj << " - " << (tmp->header[0] != NULL) << endl;
		tmp = tmp->next;
	}*/
	print_table(grp);
	clear_table(grp);
	return 0;
}

void clear_table (Grupo grp) {
	Subject *curr = grp.header;
	while (curr) {
		for (int x = 0; x < 3; x++) {
			Dados *curr_data = curr->header[x];
			while (curr_data) {
				Dados *tmp = curr_data->next;
				free (curr_data->imagem);
				free (curr_data->caminho);
				free (curr_data);
				curr_data = tmp;
			}
		}
		Subject *tmp = curr->next;
		free(curr);
		curr = tmp;
	}
}

void print_table (Grupo grp) {
	ofstream file("dados.xls" ,ofstream::out | ofstream::trunc);

	file << "<?xml version=\"1.0\"?>\n"
		 << "<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\"\n"
		 << " xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n"
		 << " xmlns:x=\"urn:schemas-microsoft-com:office:excel\"\n"
		 << " xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\"\n"
		 << " xmlns:html=\"http://www.w3.org/TR/REC-html40\">\n";

	//Subjects are sheets
	Subject *curr = grp.header;
	while(curr) {
		if (curr->subj < 10)
			file << " <Worksheet ss:Name=\"Subject 00" << curr->subj << "\">\n";
		else if (curr->subj < 100)
			file << " <Worksheet ss:Name=\"Subject 0" << curr->subj << "\">\n";
		else
			file << " <Worksheet ss:Name=\"Subject " << curr->subj << "\">\n";

		//Now comes the data:
		file << "  <Table x:FullColumns=\"1\" x:FullRows=\"1\">\n";
		file << "   <Row>\n";
		file << "    <Cell><Data ss:Type=\"String\">" << "Event" << "</Data></Cell>\n";
		file << "    <Cell><Data ss:Type=\"String\">" << "Notes" << "</Data></Cell>\n";
		file << "    <Cell><Data ss:Type=\"String\">" << "Duration" << "</Data></Cell>\n";
		file << "   </Row>\n";
		
		for(int x = 0; x < 3; x++) {
			Dados *ptr = curr->header[x];
			if (ptr) {
				file << "   <Row>\n";
				file << "    <Cell><Data ss:Type=\"String\">" << "Dummy" << "</Data></Cell>\n";
				file << "    <Cell><Data ss:Type=\"Number\">" << "" << "</Data></Cell>\n";
				file << "    <Cell><Data ss:Type=\"Number\">" << "6" << "</Data></Cell>\n";
				file << "   </Row>\n";

				while(ptr) {
					file << "   <Row>\n";
					file << "    <Cell><Data ss:Type=\"String\">" << "Imagem" << "</Data></Cell>\n";
					file << "    <Cell><Data ss:Type=\"String\">" << ptr->caminho << ptr->imagem << "</Data></Cell>\n";
					file << "    <Cell><Data ss:Type=\"Number\">" << "4" << "</Data></Cell>\n";
					file << "   </Row>\n";

					file << "   <Row>\n";
					file << "    <Cell><Data ss:Type=\"String\">" << "Pergunta1" << "</Data></Cell>\n";
					file << "    <Cell><Data ss:Type=\"Number\">" << ptr->resp1 << "</Data></Cell>\n";
					file << "    <Cell><Data ss:Type=\"Number\">" << "5" << "</Data></Cell>\n";
					file << "   </Row>\n";

					file << "   <Row>\n";
					file << "    <Cell><Data ss:Type=\"String\">" << "Distracao" << "</Data></Cell>\n";
					file << "    <Cell><Data ss:Type=\"String\">" << "" << "</Data></Cell>\n";
					file << "    <Cell><Data ss:Type=\"Number\">" << "0.5" << "</Data></Cell>\n";
					file << "   </Row>\n";

					file << "   <Row>\n";
					file << "    <Cell><Data ss:Type=\"String\">" << "Pergunta2" << "</Data></Cell>\n";
					file << "    <Cell><Data ss:Type=\"Number\">" << ptr->resp2 << "</Data></Cell>\n";
					file << "    <Cell><Data ss:Type=\"Number\">" << "5" << "</Data></Cell>\n";
					file << "   </Row>\n";

					file << "   <Row>\n";
					file << "    <Cell><Data ss:Type=\"String\">" << "Descanso" << "</Data></Cell>\n";
					file << "    <Cell><Data ss:Type=\"String\">" << "" << "</Data></Cell>\n";
					file << "    <Cell><Data ss:Type=\"Number\">" << ptr->tempo << "</Data></Cell>\n";
					file << "   </Row>\n";					

					ptr = ptr->next;
				}
			}			
			
		}


		file << "  </Table>\n";



		file << " </Worksheet>\n";
		curr = curr->next;
	}

	file << "</Workbook>\n";
}

